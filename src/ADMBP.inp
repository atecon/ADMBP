function void lagselect (bundle *b)
    /* Determine optimal lag-length */

    errorif(b.pq == 1, "You have to set the maximum lag-length pq > 1")

    series y = b.my
    list xlist = b.mx
    list rxlist = b.mrx
    lags xlist

    smpl +b.pq ;
    matrix mat = zeros(b.pq,3)
    rnam = sprintf("%2.0f ", seq(1, b.pq))

    loop i=1..b.pq -q
        list Lx = xlist(b.pqmin to -$i) rxlist
        catch var $i y ; Lx --silent
        if $error
            mat[i,] = mshape(NA, 1, 3)
        else
            mat[i,] = $aic ~ $bic ~ $hqc
        endif
    endloop
    matrix b.pq = iminc(mat[,b.crit])

    if b.verbose
        printf "\n*** Lag selection based on %d obs. ***\n", $nobs
        printf "--------------------------------------\n"
        cnameset(mat, "AIC BIC HQ")
        rnameset(mat, rnam)
        printf "%12.4f\n", mat
        printf "The selected information criteria suggests an ARDL(%d,%d) in levels.\n", b.pq, b.pq
        printf "\n"
    endif
end function


function scalar is_stable_model (const matrix ARcoef)
  /* Check for dynamic stability.
  return: 1 if stable, otherwise 0. */

  scalar value = 1 - sum(ARcoef)

  if -value < -0.00001
      return 1
  else
      return 0
  endif
end function


function bundle setARDL (const series endogenous "Endogenous in levels",
                         list xlist "Exogenous in levels",
                         list rxlist[null] "Restricted I(0)s excl. intercept",
                         int pqmax[1::4] "Max. lag-length in levels",
                         int crit[1:3:1] "Info criteria" {"AIC", "BIC", "HQ"},
                         bool condARDL[1] "Consider contemporaneous effects of xlist",
                         int shocktype[0:1:] "Shocktype" {"transitory", "permanent"},
                         int btype[0:4:1] "Bootstrap type" {"parametric", "non-parametric", "wild uniform", "wild Rademacher", "block-boots."},
                         int bootrep[99::999] "No. of bootstrap iterations",
                         int horiz[1::12] "Max. horizon periods",
                         scalar cilevel[0.01:0.99:0.1] "Width confidence intervals 1-cilevel",
                         bool verbose[1] "Print details",
                         scalar failstop[0.01:0.9:0.2] "Fraction of failed bootstrap iterations before full stop")
    /* Setup model for estimation step. */

    bundle b

    scalar b.addDET = 0

    if exists(rxlist)
      if inlist(rxlist, "const")
        scalar b.addDET = 1
        rxlist -= const
      endif
    else
      list rxlist = null
    endif

    list Lall = endogenous xlist rxlist

    scalar nobs = $nobs
    list Lall = endogenous xlist rxlist
    smpl Lall --no-missing
    errorif($nobs < nobs, "Some of your series has missing values. Fix that. Abort.")

    strings b.names_variables = varnames(Lall)
    b.names_variables[1] = argname(endogenous)

    matrix b.my = {endogenous}
    matrix b.mx = xlist
    matrix b.mrx = rxlist
    b.nx = nelem(xlist)
    b.nrx = nelem(rxlist)

    b.pq = pqmax
    b.crit = crit
    b.condARDL = condARDL

    scalar pqmin = (b.condARDL == 1) ? 0 : -1
    b.pqmin = pqmin
    b.cilevel = cilevel
    b.btype = btype
    b.bootrep = bootrep
    b.horiz = horiz
    b.shocktype = shocktype
    b.failstop = failstop
    b.verbose = verbose
    string b.optsil = (verbose == 1) ? "" : "--quiet"
    scalar b.error = FALSE

    return b
end function


function void runARDL (bundle *b)
    /* Actual estimation part. */

    errorif(inbundle(b, "finset"), "Before calling runARDL() a 2nd time, call setARDL() 1st again.")

    series endogenous = b.my
    list xlist = b.mx
    list rxlist = b.mrx
    lags endogenous
    list lDET = null
    string quiet = b.optsil

    if b.verbose
        ARDLinfo(&b)
    endif

    # TODO: In principle we could provide an user-defined matrix before calling runARDL()
    # This could be helpful if want to provide a gappy coefficient matrix with some
    # zeros or fixed parameters (for whatever reasons).
    if b.addDET == 1
        list lDET += const
    endif

    ols endogenous lDET endogenous(-1 to -b.pq) xlist(b.pqmin to -b.pq) \
        rxlist @quiet

    # Evaluate stability first
    scalar b.ay = b.addDET + 1
    scalar b.ey = b.ay+b.pq-1
    b.ARcoef = $coeff[b.ay:b.ey]
    isstable = is_stable_model(b.ARcoef)

    if !isstable
        print "Error: The model is unstable. Re-specify and try again"
        b.error = TRUE
    endif

    if b.error == FALSE
        scalar b.ax = b.ey + 1
        scalar b.ex = b.ax + b.nx * (b.condARDL + b.pq) - 1
        # Zcoef: Const.~X1(0 to -pq)~...~Xk(0 to -pq)~rxlist (incl. time, dummies etc.)
        if b.addDET > 0  # Deterministics + DL coeff needed for ysim()
            b.Zcoef = $coeff[1:(b.ay-1)] | $coeff[b.ey+1:]
        else
            b.Zcoef = $coeff[b.ey+1:]
        endif
        b.muhat = {$uhat}

        bootARDL(&b)

        # Compute median and confidence intervals of dynamic multipliers for each variable y and xlist.

        # DM_@vname: lower bound ~ median ~ upper bound
        matrix crit = { b.cilevel / 2, 0.5, (1 - b.cilevel / 2) }
        loop i=1..(1+b.nx) -q
            string vname = b.names_variables[$i]
            b.DM_@vname = quantile(b.DMraw_@vname', crit)'
        endloop
    else
        # unstable case
        loop i=1..(1+b.nx) -q
            string vname = b.names_variables[$i]
            matrix b.DM_@vname = NA
        endloop
    endif

    b.finset = 1
end function


function void drawE (bundle *b, series *e)
    /* Sample from residuals. */

    series uhat = b.muhat

    #uhat = uhat-mean(uhat)	# FIXME: is re-centering needed here??

    if b.btype == 0
        series e = normal(0,sd(uhat))	# parametric bootstrap
    elifseries e = resample(uhat)		# draw from estimated residuals by resampling (may suffer from serial correl.)
    elif b.btype == 2						# wild uniform
        series e = resample(uhat) * uniform(0,1)
    elif b.btype == 3				# Use Rademacher distrib. instead of uniform(0,1)
        series Rad = uniform(0,1)
        Rad = -1*(Rad<=0.5) + (Rad>0.5)
        eries e = resample(uhat) * Rad
    elif b.btype == 4						# block bootstrap
        series e = SB(b.muhat)
    endif
end function


function series SB (matrix x)
    /* */

    #matrix x "Data to be resampled"
    # FIXME: should x be the de-meaned residuals??

    scalar n = rows(x)
    errorif(n == 0, "Data input error, check your data.")

    b = round(1.75*(n^(1/3)))	# mean block size to rule-of-thumb value
    p = 1/b   					# probability of a new run
    s = seq(1,n)'              	# sequence
    u = 1 | (muniform(n-1,1) .< p) # run starts
    r = cum(u)                     # id of each run
    nr = r[n]                      # how many runs ?
    sub = selifr(r ~ s, u)         # starting row for each run
    sub[,2] -= mrandgen(i, 1, n, nr, 1) # adjust starting points

    # --- create mini-trends ----------------
    s -= replace(r, sub[,1], sub[,2])

    # roll over if necessary
    s = ((s-1)%n) + 1
    series xx = x[s,]

    return xx
end function


function void bootARDL (bundle *b)
    /* */

    series endogenous = b.my
    list xlist = b.mx
    list rxlist = b.mrx
    series uhat = b.muhat
    string quiet = b.optsil

    lags endogenous xlist
    list Z = null
    if b.addDET > 0
        list Z += const
    endif
    list Z += xlist(b.pqmin to -b.pq) rxlist

    matrix Xbeta = b.Zcoef

    loop i=1..(1+b.nx) -q
        # Store dynamic multipliers of each xlist regressor
        matrix mout$i = zeros(1+b.horiz,b.bootrep)
    endloop

    scalar nloop = 1
    scalar failed = 0
    scalar failed_bootstrap = 0

    loop while nloop <= b.bootrep -q
        series e = 0
        drawE (&b,&e)

        # Simulate the DGP
        series y_b = zeromiss(0)
        varsimA(endogenous, b.ARcoef, Z, Xbeta, e, b.pq, &y_b)

        lags y_b 1
        list ylist_b = y_b(-1 to -b.pq)
        if b.addDET == 1
            ols y_b const ylist_b xlist(b.pqmin to -b.pq) rxlist --quiet
        else
            ols y_b ylist_b xlist(b.pqmin to -b.pq) rxlist --quiet
        endif

        if nloop == 1
            matrix BHAT_b = zeros(b.bootrep,nelem($xlist))
        endif

        matrix ARcoef_b = $coeff[b.ay:b.ey]
        scalar isstable = is_stable_model(ARcoef_b)

        if !isstable
            failed++
            if (failed / b.bootrep) >= b.failstop
                printf "\nError: %d pct. of the bootstrap iterations failed due to instability.\n", 100*b.failstop
                print "Error: Re-consider to re-specify your model."
                failed_bootstrap = 1
                break
            endif
        else
            BHAT_b[nloop,] = $coeff'
            shockbeta = $coeff[b.ax:b.ex]
            shockbeta = mshape(shockbeta, (b.condARDL + b.pq), b.nx)

            loop i=1..(1+b.nx) -q
                matrix mtmp = zeros(b.horiz,1)
                if i == 1		# response of y to a shock in y
                    dmfilt(ARcoef_b, ARcoef_b, b.horiz, b.shocktype, &mtmp)
                else		# response of y to a shock in x_i
                    dmfilt(ARcoef_b, shockbeta[,i-1], b.horiz, b.shocktype, &mtmp)
                endif

                mout$i[,nloop] = mtmp
            endloop
            nloop++
        endif
    endloop

    b.BHAT_b = BHAT_b
    loop i=1..(1+b.nx) -q
        string vname = b.names_variables[$i]
        matrix b.DMraw_@vname = mout$i
    endloop

    if failed_bootstrap == 1 && (quiet != "--quiet")
        printf "\nError: %.2f pct. of the %d bootstrap iterations failed due to instability.\n", (failed/b.bootrep), b.bootrep
    endif


    # Clean up the bundle
    delete b.nrx
    delete b.crit
    #delete b.mrx
    delete b.Zcoef
    #delete b.btype
    #delete b.shocktype
    delete b.ARcoef
    #delete b.addDET
    #delete b.pqmin
    delete b.muhat
end function


function void varsimA (series endogenous,
                       matrix ARbeta "Coeff. vector of endogenous",
                       list X "rxlist ~ xlist of exogenous, -pmin to -p",
                       matrix Xbeta "coeff vector of Xs",
                       series e "resampled",
                       int p,
                       series *ysim)
    /* # Thankfully borrowed from Jack! */

    series m = lincomb(X, Xbeta)
    scalar T = minr(rows({e})~rows({m}))
    if p > 1
        matrix A = ARbeta' | (I(p-1) ~ 0)
    else
        matrix A = ARbeta'
    endif

    matrix y0 = mreverse({endogenous}[1:p])'
    matrix U = {e + m} ~ zeros(T, p-1)
    matrix S = varsimul(A, U, y0)
    S = S[,1]

    if p > 1
        S = {endogenous}[1:p-1] | S
    endif

    series ysim = S
end function


function void ARDLinfo (bundle *b)
    /* */

    printf "\n******************************************\n"
    printf "*** ARDL (%d) in levels regression       ***\n", b.pq
    printf "******************************************\n"
    printf "\nSettings for dynamic multiplier computation\n"

    if b.shocktype == 0
        string stype = "temporary"
    else
        string stype = "permanent"
    endif

    printf "\nShock type: %s\n", stype
    printf "Bootstrap iterations: %d\n", b.bootrep

    if b.btype == 0
        string btype = "parametric"
    elif b.btype == 1
        string btype = "non-parametric"
    elif b.btype == 2
        string btype = "wild (uniform)"
    elif b.btype == 3
        string btype = "wild (Rademacher)"
    elif b.btype == 4
        string btype = "block-bootstrap"
    endif

    printf "Bootstrap type: %s\n", btype
    printf "Confidence interval: %.2f\n", (1-b.cilevel)
end function


function void ECMinfo (bundle *b)
    /* */

    printf "\n******************************************\n"
    printf "*** Error-correction model bootstrap   ***\n"
    printf "*** coefficient estimates           ***\n"
    printf "******************************************\n"
    printf "\nError correction coeff. rho (bootstrap values)\n"
    printf "----------------------------------------------\n"
    printf "                 Mean   Median     S.D.\n"
    printf "       rho %10.4f %8.4f %8.4f \n", b.RHO[1], b.RHO[2], b.RHO[3]
    printf "\nLong-run multipliers (bootstrap values)\n"
    printf "----------------------------------------------\n"
    printf "                 Mean   Median     S.D.\n"
    loop i=1..(1+b.nx) -q
        string vname = b.names_variables[$i]
        printf "%10s %10.4f %8.4f %8.4f\n", b.names_variables[$i],
    b.LRbeta_@vname[1], b.LRbeta_@vname[2], b.LRbeta_@vname[3]
    endloop

    printf "\nBewley's long-run multipliers (2SLS point estimates)\n"
    printf "----------------------------------------------\n"
    printf "               Coeff.     S.D. \n"
    loop i=2..(1+b.nx) -q
        string vname = b.names_variables[$i]
        printf "%10s %10.4f %8.4f\n", b.names_variables[$i], b.LRBew[i-1], b.LRBewSE[i-1]
    endloop
    printf "******************************************\n"
end function


function void LRbeta(bundle *b)
    # Transform the ARDL level model coefficients in order
    # to obtain the the error-correction coeff. "rho", the long-run
    # multipliers (median bootstrap values) and its bootstrap S.D.

    # RHO = -[1-SUM_j=1^pq a_{t-j}]
    matrix ybeta = b.BHAT_b[,b.ay:b.ey]
    matrix b.RHO_b = -(1-sumr(ybeta))
    matrix b.RHO = meanc(b.RHO_b) ~ quantile(b.RHO_b,0.5) ~ sd(b.RHO_b)
    cnameset(b.RHO, "Mean Median SD")

    # Long-run multiplier
    # b_i = (SUM_j=0^pq c_{t-j})/(1-rho)
    matrix xbetas = b.BHAT_b[,b.ax:b.ex]
    scalar in=1

    loop i=1..(1+b.nx) -q
        string vname = b.names_variables[$i]
        if i==1
            matrix b.LRbeta_@vname_b = sumr(ybeta)./(1.-sumr(ybeta))	# long-run multiplier of a change in y on y
        else
            out=in+(b.condARDL+b.pq)-1
            cmat = xbetas[,in:out]
            # long-run multiplier of a change in x_i on y
            b.LRbeta_@vname_b = sumr(cmat)./(1.-sumr(ybeta))
            in=in+(b.condARDL+b.pq)
        endif
        matrix b.LRbeta_@vname = mean(b.LRbeta_@vname_b) ~ \
            quantile(b.LRbeta_@vname_b,0.5) ~ sd(b.LRbeta_@vname_b)
        cnameset(b.LRbeta_@vname, "Mean Median SD")
    endloop

    # Compute LR coeff and SEs using Bewley's IV estim.
    Bewley(&b)

    # Print results
    if b.optsil == ""
        ECMinfo(&b)
    endif

     # Bundle cleanup
     delete b.nx
     delete b.pq
     delete b.ey
     delete b.ax
     delete b.ex
     delete b.ay
     delete b.condARDL
     delete b.cilevel
     delete b.optsil
end function

function void Bewley(bundle *b)
    /* Estimate the long-run multiplier and associated S.E. using the IV approach by Bewley (1979) */

    series endogenous = b.my
    series dY = diff(endogenous)
    list xlist = b.mx
    list Dxlist = diff(xlist)
    list rxlist = b.mrx

    lags endogenous xlist

    if b.optsil == ""
        ARDLinfo(&b)
    endif

    list lDET = null
    if b.addDET==1
        lDET+=const
    endif

    #-------------
    # Bewley(1979)
    #-------------
    # Set the instruments
    pqmin = b.pqmin
    list inst = lDET endogenous(-1 to -b.pq) xlist(b.pqmin to -b.pq) rxlist
    # IV 2SLS
    list all = lDET xlist dY(0 to -(b.pq+1)) Dxlist(0 to -(b.pq+1)) rxlist
    tsls endogenous lDET xlist dY(b.pqmin to -(b.pq-1)) Dxlist(b.pqmin to -(b.pq-1)) rxlist ; inst --robust --quiet

    scalar nx = nelem(xlist)
    scalar ax = 1+nelem(lDET)
    scalar ex = ax+nx-1
    matrix LRBew = $coeff[ax:ex]
    matrix LRBewSE = $stderr[ax:ex]
    b.LRBew = LRBew
    b.LRBewSE = LRBewSE
end function


function void ECterm(bundle *b)
    # Compute error correction term (cointegrating relationship)
    # based on bootstrap median long-run coeff.
    # See for the different cases:
    # -->http://blog.eviews.com/2017/04/autoregressive-distributed-lag-ardl.html
    # Case 1: no constant
    # --> ECt = yt - b'x_t
    # Case 2: restricted constant and no trend
    # --> ECt = yt - b'x_t - a0/rho
    # Case 3: unrestricted constant and no trend
    # --> ECt = yt - b'x_t
    # Case 4: unrestricted constant and restricted trend
    # --> ECt = yt - b'x_t - a1/rho
    # Case 5: unrestricted constant and unrestricted trend
    # --> ECt = yt - b'x_t
    # TODO: add constant cases!

    series endogenous = b.my
    list xlist = b.mx
    scalar nx = nelem(xlist)
    matrix beta = zeros(nx,1)
    loop i=1..nx -q
        string vname = b.names_variables[1+$i]
        beta[i] = b.LRbeta_@vname[2]			# based on median value
    endloop
    list LR = xlist
    list lall = endogenous LR
    matrix X = {lall}
    series b.ECM = endogenous - lincomb(LR,beta)
    #setinfo b.ECM --description="EC unrestricted const. "
    if b.addDET == 1
        scalar a0 = quantile(b.BHAT_b[,1],0.5)	# bootstrap median constant
        series b.ECMrc = endogenous - lincomb(LR,beta) - a0/b.RHO[2]	# Case 2
        #setinfo b.ECMrc --description="EC restricted const."
    endif
end function


function void dmfilt (const matrix ARcoef,
                      const matrix ycoef,
                      int horiz,
                      int shocktype,
                      matrix *DM)
    /* */

    matrix impulse = ones(horiz + 1, 2)
    impulse[2:,1] = 0
    DM = filter(impulse, ycoef, ARcoef)
    if shocktype == 0
        DM = DM[,1]
    elif shocktype == 1
        DM = DM[,2]
    endif
end function


function void irf_plot (const matrix m,
                        const string title,
                        const string xlab,
                        const string ylab)
    /* */

    set force_decpoint on

    plot m
        option single-yaxis
        options with-lines time-series
        literal set linetype 1 lc rgb 'grey' dt 2 lw 1.5
        literal set linetype 2 lc rgb 'black' lw 2
        literal set linetype 3 lc rgb 'grey' dt 2 lw 1.5
        literal set nokey
        printf "set title '%s'", title
        printf "set xlabel '%s'", xlab
        printf "set ylabel '%s'", ylab
    end plot --output=display

    set force_decpoint off
end function


function void irf_plotadv (const matrix mplot,
                           const string fname,
                           const string title,
                           const string xlab,string ylab,
                           int fontsize[5::14] "Set font size in pt",
                           scalar LW "linewidth")
    /* */

    string fontopt = sprintf("font='serif,%d'", fontsize)

    set force_decpoint on

    plot mplot
        options with-lines time-series single-yaxis #@fontopt
        literal set nokey
        printf "set title '%s'", title
        printf "set xlabel '%s' offset 0,1", xlab
        printf "set ylabel '%s'", ylab
        literal set y2tics
        literal set xtics out offset 0,0.7	# Move xtics closer to the x-axis
        literal set ytics out
        #2) put the border more to the background by applying it
        # only on the left and bottom part and put it and the tics in gray
        printf "set style line 11 lc rgb \"#808080\" lt 1"
        literal set border 3 back ls 11			# get rid of upper + left border
        literal set tics nomirror
        #add a slight grid to make it easier to follow the exact position of the curves
        printf "set style line 12 lc rgb \"#808080\" lt 0 lw 1"
        literal set grid back ls 12
        # Line Styles
        printf "set linetype 1 lc rgb 'grey' dt 2 lw %d", LW
        printf "set linetype 2 lc rgb 'black' lw %d", LW
        printf "set linetype 3 lc rgb 'grey' dt 2 lw %d", LW
    end plot --output="@fname"

    set force_decpoint off
end function
