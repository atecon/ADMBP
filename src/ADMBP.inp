function void lagselectARDL (bundle *b)
    /* Retrieve optimal lag-length by means of some information criteria. */

    errorif(b.pq == 1, "You have to set the maximum lag-length 'pq' > 1.")

    series y = b.my
    list xlist = b.mx
    list rxlist = b.mrx

    list Xlist = xlist rxlist

    string opt_silent = b.verbose == FALSE ? "--silent" : "--quiet"
    string opt_deterministics = b.with_trend == TRUE ? "--trend" : ""

    var b.pq y ; Xlist --lagselect @opt_deterministics @opt_silent
    scalar b.pq = iminc($test[,3 + b.crit])
end function


function scalar is_stable_model (const matrix ARcoef)
  /* Check for dynamic stability.
  return: 1 if stable, otherwise 0. */

  scalar value = 1 - sum(ARcoef)

  if -value < -0.00001
      return 1
  else
      return 0
  endif
end function


function bundle setARDL (const series endogenous "Endogenous in levels",
                         list xlist "Exogenous in levels",
                         list rxlist[null] "Restricted I0s excl. intercept",
                         int pqmax[1::4] "Max. lag-length in levels",
                         int crit[1:3:1] "Info criteria" {"AIC", "BIC", "HQ"},
                         bool condARDL[1] "Consider contemporaneous effects of xlist",
                         int shocktype[0:1:] "Shocktype" {"transitory", "permanent"},
                         int btype[0:4:1] "Bootstrap type" {"parametric", "non-parametric", "wild uniform", "wild Rademacher", "block-boots."},
                         int bootrep[99::999] "No. of bootstrap iterations",
                         int horiz[1::12] "Max. horizon periods",
                         scalar cilevel[0.01:0.99:0.1] "Width confidence intervals 1-cilevel",
                         bool verbose[1] "Print details",
                         scalar failstop[0.01:0.9:0.2] "Fraction of failed bootstrap iterations before full stop")
    /* Setup model for estimation step. */

    bundle b

    scalar b.n_deterministics = 0
    matrix b.mConstTrend = {}

    if exists(rxlist)
        b.with_intercept = inlist(rxlist, "const") ? TRUE : FALSE
        b.with_trend = inlist(rxlist, "time") ? TRUE : FALSE
        scalar b.addDET = 1
        rxlist -= const time
        b.n_deterministics = b.with_intercept + b.with_intercept
    else
      list rxlist = null
    endif

    strings cnames = empty
    if b.with_intercept
        b.mConstTrend ~= {const}
        cnames += "const"
    endif
    if b.with_trend
        b.mConstTrend ~= {time}
        cnames += "time"
    endif
    cnameset(b.mConstTrend, cnames)

    list ListConstTrend = mat2list(b.mConstTrend)

    list Lall = endogenous ListConstTrend xlist rxlist
    scalar nobs = $nobs
    smpl Lall --no-missing
    errorif($nobs < nobs, "Some of your series has missing values. Abort.")

    strings b.names_variables = varnames(Lall)
    b.names_variables[1] = argname(endogenous)

    matrix b.my = {endogenous}
    matrix b.mx = xlist
    matrix b.mrx = rxlist
    b.nx = nelem(xlist)
    b.nrx = nelem(rxlist)
    b.pq = pqmax
    b.crit = crit
    b.condARDL = condARDL

    scalar pqmin = (b.condARDL == 1) ? 0 : -1
    b.pqmin = pqmin
    b.cilevel = cilevel
    b.btype = btype
    b.bootrep = bootrep
    b.horiz = horiz
    b.shocktype = shocktype
    b.failstop = failstop
    b.verbose = verbose
    string b.optsil = (verbose == 1) ? "" : "--quiet"
    scalar b.error = FALSE

    return b
end function


function void runARDL (bundle *b)
    /* Actual estimation part. */

    errorif(inbundle(b, "finset"), "Before calling runARDL() a second time, call setARDL() first again.")

    series endogenous = b.my
    list xlist = b.mx
    list rxlist = mat2list(b.mrx)
    list ListConstTrend = mat2list(b.mConstTrend)

    lags endogenous
    string quiet = b.optsil

    if b.verbose
        ARDLinfo(&b)
    endif

    # TODO: In principle we could provide an user-defined matrix before calling runARDL()
    # This could be helpful if want to provide a gappy coefficient matrix with some
    # zeros or fixed parameters (for whatever reasons).

    ols endogenous ListConstTrend endogenous(-1 to -b.pq) \
        xlist(b.pqmin to -b.pq) rxlist @quiet

    # Evaluate stability first
    scalar b.n_coeff = nelem($xlist)
    scalar b.init_consttrend = 1
    scalar b.last_consttrend = b.n_deterministics
    scalar b.ay = b.init_consttrend + 1
    scalar b.ey = b.ay + b.pq - 1
    b.ARcoef = $coeff[b.ay:b.ey]
    isstable = is_stable_model(b.ARcoef)
    scalar nvars = 1 + b.n_deterministics + b.nx

    if !isstable
        print "Error: The model is unstable. Re-specify your model and try again"
        b.error = TRUE
    endif

    if b.error == FALSE
        scalar b.ax = b.ey + 1
        scalar b.ex = b.ax + b.nx * (b.condARDL + b.pq) - 1
        # Zcoef: Const.~X1(0 to -pq)~...~Xk(0 to -pq)~rxlist( dummies etc.)
        if nelem(ListConstTrend) > 0  # Deterministics + DL coeff needed for ysim()
            b.Zcoef = $coeff[1:(b.ay-1)] | $coeff[b.ey+1:]
        else
            b.Zcoef = $coeff[b.ey+1:]
        endif

        b.muhat = {$uhat}
        bootARDL(&b)

        # Compute median and confidence intervals of dynamic multipliers for each variable y and xlist.

        # DM_@vname: lower bound ~ median ~ upper bound
        matrix crit = { b.cilevel / 2, 0.5, (1 - b.cilevel / 2) }

        loop i=1..nvars
            string vname = b.names_variables[$i]
            b["DM_@vname"] = quantile(b.DMraw_@vname', crit)'
        endloop
        stop
    else
        loop i=1..nvars
            string vname = b.names_variables[$i]
            matrix b.DM_@vname = NA
        endloop
    endif

    b.finset = 1
end function


function series drawE (const bundle b)
    /* Sample from residuals. */

    series uhat = b.muhat

    #uhat = uhat-mean(uhat)	# FIXME: is re-centering needed here??

    if b.btype == 0
        series e = normal(0, sd(uhat))	     # parametric bootstrap
    elif b.btype == 1
        # draw from estimated residuals by resampling
        # (may suffer from serial correl.)
        series e = resample(uhat)
    elif b.btype == 2						# wild uniform
        series e = resample(uhat) * uniform(0,1)
    elif b.btype == 3	# Use Rademacher distrib. instead of uniform(0,1)
        series Rad = uniform(0,1)
        Rad = -1 * (Rad <= 0.5) + (Rad > 0.5)
        series e = resample(uhat) * Rad
    elif b.btype == 4						# block bootstrap
        series e = SB(b.muhat, 0)
    endif

    return e
end function



function void bootARDL (bundle *b)
    /* Bootsrap estimation. */

    series endogenous = b.my
    list xlist = b.mx
    list rxlist = mat2list(b.mrx)
    list ListConstTrend = mat2list(b.mConstTrend)
    series uhat = b.muhat
    string quiet = b.optsil

    lags endogenous xlist
    list Z = null
    list Z = ListConstTrend xlist(b.pqmin to -b.pq) rxlist
    matrix Xbeta = b.Zcoef

    # TODO: Make use of matrix array
    loop i=1..(1+b.nx)
        # Store dynamic multipliers of each xlist regressor
        matrix mout$i = zeros(1+b.horiz, b.bootrep)
    endloop

    scalar nloop = 1
    scalar failed = 0
    matrix BHAT_b = zeros(b.bootrep, b.n_coeff)

    loop while nloop <= b.bootrep
        series e = drawE(b)
        series y_b = varsimA(endogenous, b.ARcoef, Z, Xbeta, e, b.pq)

        lags y_b 1
        list ylist_b = y_b(-1 to -b.pq)
        list features = ListConstTrend ylist_b xlist(b.pqmin to -b.pq) rxlist

        ols y_b features --quiet
        matrix ARcoef_b = $coeff[b.ay:b.ey]
        scalar isstable = is_stable_model(ARcoef_b)

        if !isstable
            failed++
            if (failed / b.bootrep) >= b.failstop
                printf "\nError: %d pct. of the bootstrap iterations failed due to instability.\n",\
                    100*b.failstop
                print "Error: Try to re-specify your model."
                break
            endif
        else
            BHAT_b[nloop,] = $coeff'
            shockbeta = $coeff[b.ax:b.ex]
            shockbeta = mshape(shockbeta, (b.condARDL + b.pq), b.nx)

            loop i=1..(1+b.nx)
                matrix mtmp = zeros(b.horiz, 1)

                if i == 1
                    # response of endogenous to a shock in endogenous
                    dmfilt(ARcoef_b, ARcoef_b, b.horiz, b.shocktype, &mtmp)
                else		# response of y to a shock in x_i
                    dmfilt(ARcoef_b, shockbeta[,i-1], b.horiz,
                           b.shocktype, &mtmp)
                endif
                mout$i[,nloop] = mtmp
            endloop

            nloop++
        endif
    endloop

    b.BHAT_b = BHAT_b

    scalar varcounter = 1
    scalar nvars =
    loop i=1..(1+b.nx)
        string vname = b.names_variables[$i]
        matrix b.DMraw_@vname = mout$i
    endloop

    # Clean up the bundle
    delete b.nrx
    delete b.crit
    #delete b.mrx
    delete b.Zcoef
    #delete b.btype
    #delete b.shocktype
    delete b.ARcoef
    #delete b.addDET
    #delete b.pqmin
    delete b.muhat
end function


function series varsimA (const series endogenous,
                       const matrix ARbeta "Coeff. vector of endogenous",
                       const list X "rxlist ~ xlist of exogenous, -pmin to -p",
                       const matrix Xbeta "coeff vector of Xs",
                       const series e "innovations",
                       int p[1::] "Lag length")
    /* Simulate VAR. Thankfully borrowed from Jack. */

    matrix my = {endogenous}

    series m = lincomb(X, Xbeta)
    scalar T = minr(rows({e}) ~ rows({m}))
    matrix A = ARbeta'
    if p > 1
        matrix A |= (I(p-1) ~ 0)
    endif

    matrix y0 = mreverse(my[1:p])'
    matrix U = {e + m} ~ zeros(T, p-1)
    matrix S = varsimul(A, U, y0)[, 1]

    if p > 1
        S = my[1:p-1] | S
    endif

    series x = S

    return x
end function


function void ARDLinfo (bundle *b)
    /* */

    printf "\n******************************************\n"
    printf "    ARDL (%d) in levels regression\n", b.pq
    printf "******************************************\n"
    printf "\nSettings for dynamic multiplier computation\n"

    string stype = (b.shocktype == 0) ? "temporary" : "permanent"

    printf "\nShock type: %s\n", stype
    printf "Bootstrap iterations: %d\n", b.bootrep

    if b.btype == 0
        string btype = "parametric"
    elif b.btype == 1
        string btype = "non-parametric"
    elif b.btype == 2
        string btype = "wild (uniform)"
    elif b.btype == 3
        string btype = "wild (Rademacher)"
    elif b.btype == 4
        string btype = "block-bootstrap"
    endif

    printf "Bootstrap type: %s\n", btype
    printf "Confidence interval: %.2f\n", (1 - b.cilevel)
end function


function void ECMinfo (bundle *b)
    /* */


    printf "\n******************************************\n"
    printf "    Error-correction model bootstrap\n"
    printf "    coefficient estimates\n"
    printf "********************************************\n"
    printf "\nError correction coeff. rho (bootstrap values)\n"
    printf "----------------------------------------------\n"
    printf "                 Mean   Median     S.D.\n"
    printf "       rho %10.4f %8.4f %8.4f \n", b.RHO[1], b.RHO[2], b.RHO[3]
    printf "\nLong-run multipliers (bootstrap values)\n"
    printf "----------------------------------------------\n"
    printf "                 Mean   Median     S.D.\n"

    # TODO: get rid of this: create a new array holding y and x series names onl
    scalar varcounter = 1
    loop i=1..(1+b.nx)
        string vname = b.names_variables[varcounter]

        printf "%10s %10.4f %8.4f %8.4f\n", vname, b.LRbeta_@vname[1],
            b.LRbeta_@vname[2], b.LRbeta_@vname[3]

        if i == 1
            varcounter += 1 + b.n_deterministics  # skip "const" and "time"
        else
            varcounter++
        endif
    endloop

    printf "\nBewley's long-run multipliers (2SLS point estimates)\n"
    printf "----------------------------------------------\n"
    printf "               Coeff.     S.D. \n"
    loop i=2..(1+b.nx)
        string vname = b.names_variables[b.n_deterministics + $i]
        printf "%10s %10.4f %8.4f\n", vname, b.LRBew[i-1], b.LRBewSE[i-1]
    endloop
    printf "******************************************\n"
end function


function void LRbeta (bundle *b)
    /* Transform the ARDL level model coefficients in order to obtain the the error-correction coeff. "rho", the long-run multipliers (median bootstrap values) and its bootstrap S.D. */

    # RHO = -[1-SUM_j=1^pq a_{t-j}]
    matrix ybeta = b.BHAT_b[,b.ay:b.ey]
    matrix b.RHO_b = -(1 - sumr(ybeta))
    matrix b.RHO = meanc(b.RHO_b) ~ quantile(b.RHO_b,0.5) ~ sd(b.RHO_b)
    cnameset(b.RHO, "Mean Median SD")

    # Long-run multiplier
    # b_i = (SUM_j=0^pq c_{t-j}) / (1 - rho)
    scalar nvars = b.nx + b.n_deterministics
    matrix xbetas = b.BHAT_b[,b.ax:b.ex]
    scalar in = 1
#    scalar varcounter = 1

    loop i=1..nvars
        string vname = b.names_variables[i]

        if i == 1
            # long-run multiplier of a change in y on y
            matrix b["LRbeta_@vname_b"] = sumr(ybeta) ./ (1 .- sumr(ybeta))
 #           varcounter += 1 + b.n_deterministics # skip "const" and "time"
        else
            if vname == "const" || vname == "column1" || vname == "time"
                out = $i
            else
                out = in + (b.condARDL + b.pq) - 1
                cmat = xbetas[,in:out]
            endif

            # long-run multiplier of a change in x_i on y
            string key = sprintf("LRbeta_%s_b", vname)
            printf "\nkey = %s", key
            b["@key"] = sumr(cmat) ./ (1 .- sumr(ybeta))

            if vname == "const" || vname == "column1" || vname == "time"
                in++
            else
                in += b.condARDL + b.pq
            endif
  #          varcounter++
        endif

        matrix b["LRbeta_@vname"] = mean(b["LRbeta_@vname_b"]) ~ \
                                    quantile(b["LRbeta_@vname_b"], 0.5) ~ \
                                    sd(b["LRbeta_@vname_b"])
        cnameset(b["LRbeta_@vname"], "Mean Median SD")
    endloop
stop
    # Compute LR coeff and SEs using Bewley's IV estim.
    Bewley(&b)

    # Print results
    if b.optsil == ""
        ECMinfo(&b)
    endif

     # Bundle cleanup
     delete b.nx
     delete b.pq
     delete b.ey
     delete b.ax
     delete b.ex
     delete b.ay
     delete b.condARDL
     delete b.cilevel
     delete b.optsil
end function


function void Bewley (bundle *b)
    /* Estimate the long-run multiplier and associated S.E. using the IV approach by Bewley (1979) */

    series endogenous = b.my
    series dY = diff(endogenous)
    list xlist = b.mx
    list Dxlist = diff(xlist)
    list rxlist = mat2list(b.mrx)
    list ListConstTrend = mat2list(b.mConstTrend)

    lags endogenous xlist

    if b.optsil == ""
        ARDLinfo(&b)
    endif

    # Set the regressors
    scalar pmax_exog = b.pq - 1

    list Instruments = ListConstTrend endogenous(-1 to -b.pq) \
                        xlist(b.pqmin to -b.pq) rxlist
    list Exogenous = ListConstTrend xlist dY(b.pqmin to -pmax_exog) \
                     Dxlist(b.pqmin to -pmax_exog) rxlist

    tsls endogenous Exogenous ; Instruments --robust --quiet --no-tests

    scalar ax = 1 + nelem(ListConstTrend)
    scalar ex = ax + nelem(xlist) - 1
    matrix b.LRBew = $coeff[ax:ex]
    matrix b.LRBewSE = $stderr[ax:ex]
 end function


function void ECterm (bundle *b)
    # Compute error correction term (cointegrating relationship)
    # based on bootstrap median long-run coeff.
    # See for the different cases:
    # -->http://blog.eviews.com/2017/04/autoregressive-distributed-lag-ardl.html
    # Case 1: no constant
    # --> ECt = yt - b'x_t
    # Case 2: restricted constant and no trend
    # --> ECt = yt - b'x_t - a0/rho
    # Case 3: unrestricted constant and no trend
    # --> ECt = yt - b'x_t
    # Case 4: unrestricted constant and restricted trend
    # --> ECt = yt - b'x_t - a1/rho
    # Case 5: unrestricted constant and unrestricted trend
    # --> ECt = yt - b'x_t
    # TODO: add constant cases!

    series endogenous = b.my
    list xlist = b.mx
    list ListConstTrend = b.mConstTrend
    scalar nx = nelem(xlist)
    matrix beta = zeros(nx, 1)

    loop i=1..nx
        string vname = b.names_variables[1+$i]
        beta[i] = b.LRbeta_@vname[2]		# based on median value
    endloop

    list LR = xlist
    list lall = endogenous LR
    matrix X = {lall}
    series b.ECM = endogenous - lincomb(LR,beta)

    #setinfo b.ECM --description="EC unrestricted const. "

    if b.with_intercept == 1
        scalar a0 = quantile(b.BHAT_b[,1], 0.5)	 # bootstrap median constant
        # RHO[2] refers to the median
        series b.ECMrc -= a0 / b.RHO[2]	         # Case 2
        #setinfo b.ECMrc --description="EC restricted const."
    endif
end function


function void dmfilt (const matrix ARcoef,
                      const matrix ycoef,
                      int horiz,
                      int shocktype,
                      matrix *DM)
    /* Compute dynamic multipliers. */

    matrix impulse = ones(horiz + 1, 2)
    impulse[2:,1] = 0
    DM = filter(impulse, ycoef, ARcoef)

    DM = (shocktype == 0) ? DM[,1] : DM[,2]
end function


function bundle plot_defaults (void)
    /* Default parameter values of plotting dynamic multipliers. */

    bundle self
    string self.title = ""
    string self.ylabel = ""
    string self.xlabel = "Horizon"
    scalar self.fontsize = 10
    scalar self.lindewidth = 1
    string self.filename = "display"

    return self
end function


function void irfARDL (const matrix mplot,
                       bundle self[null])
    /* Function for plotting dynamic multipliers. */

    if exists(self)
        self = self + plot_defaults()
    else
        bundle self = plot_defaults()
    endif
    string filename = self.filename
    set force_decpoint on

    plot mplot
        options with-lines time-series single-yaxis
        literal set nokey
        printf "set title \"%s\"", self.title
        printf "set xlabel \"%s\" offset 0,1", self.xlabel
        printf "set ylabel \"%s\"", self.ylabel
        literal set y2tics
        literal set xtics out offset 0,0.7	# Move xtics closer to the x-axis
        literal set ytics out
        #2) put the border more to the background by applying it
        # only on the left and bottom part and put it and the tics in gray
        printf "set style line 11 lc rgb \"#808080\" lt 1"
        literal set border 3 back ls 11	# get rid of upper + left border
        literal set tics nomirror
        # add a slight grid to make it easier to follow the exact
        # position of the curves
        printf "set style line 12 lc rgb \"#808080\" lt 0 lw 1"
        literal set grid back ls 12
        # Line Styles
        printf "set linetype 1 lc rgb 'grey' dt 2 lw %d", self.lindewidth
        printf "set linetype 2 lc rgb 'black' lw %d", self.lindewidth
        printf "set linetype 3 lc rgb 'grey' dt 2 lw %d", self.lindewidth
    end plot --output="@filename"

    set force_decpoint off
end function
